// source: dataATG.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.dataATG.BaseMessage', null, global);
goog.exportSymbol('proto.dataATG.BaseMessage.MsgType', null, global);
goog.exportSymbol('proto.dataATG.RegCompany', null, global);
goog.exportSymbol('proto.dataATG.RegDriver', null, global);
goog.exportSymbol('proto.dataATG.RegVehicle', null, global);
goog.exportSymbol('proto.dataATG.RegVehicle.VehicleType', null, global);
goog.exportSymbol('proto.dataATG.WayPoint', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataATG.BaseMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataATG.BaseMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataATG.BaseMessage.displayName = 'proto.dataATG.BaseMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataATG.RegVehicle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataATG.RegVehicle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataATG.RegVehicle.displayName = 'proto.dataATG.RegVehicle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataATG.RegDriver = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataATG.RegDriver, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataATG.RegDriver.displayName = 'proto.dataATG.RegDriver';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataATG.RegCompany = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataATG.RegCompany, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataATG.RegCompany.displayName = 'proto.dataATG.RegCompany';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dataATG.WayPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dataATG.WayPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dataATG.WayPoint.displayName = 'proto.dataATG.WayPoint';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataATG.BaseMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.dataATG.BaseMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataATG.BaseMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataATG.BaseMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgtype: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    providerid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    senderid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    msg: (f = msg.getMsg()) && proto.dataATG.RegVehicle.toObject(includeInstance, f),
    msgregdriver: (f = msg.getMsgregdriver()) && proto.dataATG.RegDriver.toObject(includeInstance, f),
    msgregcompany: (f = msg.getMsgregcompany()) && proto.dataATG.RegCompany.toObject(includeInstance, f),
    msgwaypoint: (f = msg.getMsgwaypoint()) && proto.dataATG.WayPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataATG.BaseMessage}
 */
proto.dataATG.BaseMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataATG.BaseMessage;
  return proto.dataATG.BaseMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataATG.BaseMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataATG.BaseMessage}
 */
proto.dataATG.BaseMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.dataATG.BaseMessage.MsgType} */ (reader.readEnum());
      msg.setMsgtype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProviderid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderid(value);
      break;
    case 400:
      var value = new proto.dataATG.RegVehicle;
      reader.readMessage(value,proto.dataATG.RegVehicle.deserializeBinaryFromReader);
      msg.setMsg(value);
      break;
    case 410:
      var value = new proto.dataATG.RegDriver;
      reader.readMessage(value,proto.dataATG.RegDriver.deserializeBinaryFromReader);
      msg.setMsgregdriver(value);
      break;
    case 420:
      var value = new proto.dataATG.RegCompany;
      reader.readMessage(value,proto.dataATG.RegCompany.deserializeBinaryFromReader);
      msg.setMsgregcompany(value);
      break;
    case 100:
      var value = new proto.dataATG.WayPoint;
      reader.readMessage(value,proto.dataATG.WayPoint.deserializeBinaryFromReader);
      msg.setMsgwaypoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataATG.BaseMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataATG.BaseMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataATG.BaseMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataATG.BaseMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.dataATG.BaseMessage.MsgType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMsg();
  if (f != null) {
    writer.writeMessage(
      400,
      f,
      proto.dataATG.RegVehicle.serializeBinaryToWriter
    );
  }
  f = message.getMsgregdriver();
  if (f != null) {
    writer.writeMessage(
      410,
      f,
      proto.dataATG.RegDriver.serializeBinaryToWriter
    );
  }
  f = message.getMsgregcompany();
  if (f != null) {
    writer.writeMessage(
      420,
      f,
      proto.dataATG.RegCompany.serializeBinaryToWriter
    );
  }
  f = message.getMsgwaypoint();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.dataATG.WayPoint.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.dataATG.BaseMessage.MsgType = {
  WAYPOINT: 100,
  WAYPOINTBATCH: 101,
  OVERSPEED: 200,
  OVERTIMEDRIVING: 210,
  OVERTOTALTIMEDRIVING: 211,
  STOP: 220,
  DOOROPEN: 230,
  OVERTIMEDRIVINGBEGIN: 310,
  OVERTOTALTIMEDRIVINGBEGIN: 311,
  REGVEHICLE: 400,
  REGDRIVER: 410,
  REGCOMPANY: 420
};

/**
 * required MsgType msgType = 1;
 * @return {!proto.dataATG.BaseMessage.MsgType}
 */
proto.dataATG.BaseMessage.prototype.getMsgtype = function() {
  return /** @type {!proto.dataATG.BaseMessage.MsgType} */ (jspb.Message.getFieldWithDefault(this, 1, 100));
};


/**
 * @param {!proto.dataATG.BaseMessage.MsgType} value
 * @return {!proto.dataATG.BaseMessage} returns this
 */
proto.dataATG.BaseMessage.prototype.setMsgtype = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.BaseMessage} returns this
 */
proto.dataATG.BaseMessage.prototype.clearMsgtype = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.BaseMessage.prototype.hasMsgtype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string providerId = 2;
 * @return {string}
 */
proto.dataATG.BaseMessage.prototype.getProviderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.BaseMessage} returns this
 */
proto.dataATG.BaseMessage.prototype.setProviderid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.BaseMessage} returns this
 */
proto.dataATG.BaseMessage.prototype.clearProviderid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.BaseMessage.prototype.hasProviderid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string senderId = 3;
 * @return {string}
 */
proto.dataATG.BaseMessage.prototype.getSenderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.BaseMessage} returns this
 */
proto.dataATG.BaseMessage.prototype.setSenderid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.BaseMessage} returns this
 */
proto.dataATG.BaseMessage.prototype.clearSenderid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.BaseMessage.prototype.hasSenderid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required RegVehicle msg = 400;
 * @return {!proto.dataATG.RegVehicle}
 */
proto.dataATG.BaseMessage.prototype.getMsg = function() {
  return /** @type{!proto.dataATG.RegVehicle} */ (
    jspb.Message.getWrapperField(this, proto.dataATG.RegVehicle, 400, 1));
};


/**
 * @param {!proto.dataATG.RegVehicle} value
 * @return {!proto.dataATG.BaseMessage} returns this
*/
proto.dataATG.BaseMessage.prototype.setMsg = function(value) {
  return jspb.Message.setWrapperField(this, 400, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.BaseMessage} returns this
 */
proto.dataATG.BaseMessage.prototype.clearMsg = function() {
  return jspb.Message.setField(this, 400, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.BaseMessage.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 400) != null;
};


/**
 * required RegDriver msgRegDriver = 410;
 * @return {!proto.dataATG.RegDriver}
 */
proto.dataATG.BaseMessage.prototype.getMsgregdriver = function() {
  return /** @type{!proto.dataATG.RegDriver} */ (
    jspb.Message.getWrapperField(this, proto.dataATG.RegDriver, 410, 1));
};


/**
 * @param {!proto.dataATG.RegDriver} value
 * @return {!proto.dataATG.BaseMessage} returns this
*/
proto.dataATG.BaseMessage.prototype.setMsgregdriver = function(value) {
  return jspb.Message.setWrapperField(this, 410, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.BaseMessage} returns this
 */
proto.dataATG.BaseMessage.prototype.clearMsgregdriver = function() {
  return jspb.Message.setField(this, 410, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.BaseMessage.prototype.hasMsgregdriver = function() {
  return jspb.Message.getField(this, 410) != null;
};


/**
 * required RegCompany msgRegCompany = 420;
 * @return {!proto.dataATG.RegCompany}
 */
proto.dataATG.BaseMessage.prototype.getMsgregcompany = function() {
  return /** @type{!proto.dataATG.RegCompany} */ (
    jspb.Message.getWrapperField(this, proto.dataATG.RegCompany, 420, 1));
};


/**
 * @param {!proto.dataATG.RegCompany} value
 * @return {!proto.dataATG.BaseMessage} returns this
*/
proto.dataATG.BaseMessage.prototype.setMsgregcompany = function(value) {
  return jspb.Message.setWrapperField(this, 420, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.BaseMessage} returns this
 */
proto.dataATG.BaseMessage.prototype.clearMsgregcompany = function() {
  return jspb.Message.setField(this, 420, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.BaseMessage.prototype.hasMsgregcompany = function() {
  return jspb.Message.getField(this, 420) != null;
};


/**
 * required WayPoint msgWayPoint = 100;
 * @return {!proto.dataATG.WayPoint}
 */
proto.dataATG.BaseMessage.prototype.getMsgwaypoint = function() {
  return /** @type{!proto.dataATG.WayPoint} */ (
    jspb.Message.getWrapperField(this, proto.dataATG.WayPoint, 100, 1));
};


/**
 * @param {!proto.dataATG.WayPoint} value
 * @return {!proto.dataATG.BaseMessage} returns this
*/
proto.dataATG.BaseMessage.prototype.setMsgwaypoint = function(value) {
  return jspb.Message.setWrapperField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.BaseMessage} returns this
 */
proto.dataATG.BaseMessage.prototype.clearMsgwaypoint = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.BaseMessage.prototype.hasMsgwaypoint = function() {
  return jspb.Message.getField(this, 100) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataATG.RegVehicle.prototype.toObject = function(opt_includeInstance) {
  return proto.dataATG.RegVehicle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataATG.RegVehicle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataATG.RegVehicle.toObject = function(includeInstance, msg) {
  var f, obj = {
    vehicle: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    vehicletype: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    driver: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    company: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    devicemodelno: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    devicemodel: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    deviceid: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    sim: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    datetime: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    vin: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    capacity: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataATG.RegVehicle}
 */
proto.dataATG.RegVehicle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataATG.RegVehicle;
  return proto.dataATG.RegVehicle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataATG.RegVehicle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataATG.RegVehicle}
 */
proto.dataATG.RegVehicle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVehicle(value);
      break;
    case 2:
      var value = /** @type {!proto.dataATG.RegVehicle.VehicleType} */ (reader.readEnum());
      msg.setVehicletype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriver(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompany(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDevicemodelno(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicemodel(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSim(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDatetime(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setVin(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCapacity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataATG.RegVehicle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataATG.RegVehicle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataATG.RegVehicle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataATG.RegVehicle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.dataATG.RegVehicle.VehicleType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.dataATG.RegVehicle.VehicleType = {
  KHACH: 100,
  BUS: 200,
  HOPDONG: 300,
  DULICH: 400,
  CONTAINER: 500,
  XETAI: 600,
  TAXI: 700
};

/**
 * required string vehicle = 1;
 * @return {string}
 */
proto.dataATG.RegVehicle.prototype.getVehicle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.setVehicle = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.clearVehicle = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegVehicle.prototype.hasVehicle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required VehicleType vehicleType = 2;
 * @return {!proto.dataATG.RegVehicle.VehicleType}
 */
proto.dataATG.RegVehicle.prototype.getVehicletype = function() {
  return /** @type {!proto.dataATG.RegVehicle.VehicleType} */ (jspb.Message.getFieldWithDefault(this, 2, 100));
};


/**
 * @param {!proto.dataATG.RegVehicle.VehicleType} value
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.setVehicletype = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.clearVehicletype = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegVehicle.prototype.hasVehicletype = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string driver = 3;
 * @return {string}
 */
proto.dataATG.RegVehicle.prototype.getDriver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.setDriver = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.clearDriver = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegVehicle.prototype.hasDriver = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string company = 4;
 * @return {string}
 */
proto.dataATG.RegVehicle.prototype.getCompany = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.setCompany = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.clearCompany = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegVehicle.prototype.hasCompany = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 deviceModelNo = 5;
 * @return {number}
 */
proto.dataATG.RegVehicle.prototype.getDevicemodelno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.setDevicemodelno = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.clearDevicemodelno = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegVehicle.prototype.hasDevicemodelno = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string deviceModel = 6;
 * @return {string}
 */
proto.dataATG.RegVehicle.prototype.getDevicemodel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.setDevicemodel = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.clearDevicemodel = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegVehicle.prototype.hasDevicemodel = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string deviceId = 7;
 * @return {string}
 */
proto.dataATG.RegVehicle.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.setDeviceid = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.clearDeviceid = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegVehicle.prototype.hasDeviceid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string sim = 8;
 * @return {string}
 */
proto.dataATG.RegVehicle.prototype.getSim = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.setSim = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.clearSim = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegVehicle.prototype.hasSim = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 datetime = 9;
 * @return {number}
 */
proto.dataATG.RegVehicle.prototype.getDatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.setDatetime = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.clearDatetime = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegVehicle.prototype.hasDatetime = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string vin = 10;
 * @return {string}
 */
proto.dataATG.RegVehicle.prototype.getVin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.setVin = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.clearVin = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegVehicle.prototype.hasVin = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional float capacity = 11;
 * @return {number}
 */
proto.dataATG.RegVehicle.prototype.getCapacity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.setCapacity = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegVehicle} returns this
 */
proto.dataATG.RegVehicle.prototype.clearCapacity = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegVehicle.prototype.hasCapacity = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataATG.RegDriver.prototype.toObject = function(opt_includeInstance) {
  return proto.dataATG.RegDriver.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataATG.RegDriver} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataATG.RegDriver.toObject = function(includeInstance, msg) {
  var f, obj = {
    driver: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    datetimeissue: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    datetimeexpire: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    regplace: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    license: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataATG.RegDriver}
 */
proto.dataATG.RegDriver.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataATG.RegDriver;
  return proto.dataATG.RegDriver.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataATG.RegDriver} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataATG.RegDriver}
 */
proto.dataATG.RegDriver.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriver(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDatetimeissue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDatetimeexpire(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegplace(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicense(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataATG.RegDriver.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataATG.RegDriver.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataATG.RegDriver} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataATG.RegDriver.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * required string driver = 1;
 * @return {string}
 */
proto.dataATG.RegDriver.prototype.getDriver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.RegDriver} returns this
 */
proto.dataATG.RegDriver.prototype.setDriver = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegDriver} returns this
 */
proto.dataATG.RegDriver.prototype.clearDriver = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegDriver.prototype.hasDriver = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.dataATG.RegDriver.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.RegDriver} returns this
 */
proto.dataATG.RegDriver.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegDriver} returns this
 */
proto.dataATG.RegDriver.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegDriver.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 datetimeIssue = 3;
 * @return {number}
 */
proto.dataATG.RegDriver.prototype.getDatetimeissue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.dataATG.RegDriver} returns this
 */
proto.dataATG.RegDriver.prototype.setDatetimeissue = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegDriver} returns this
 */
proto.dataATG.RegDriver.prototype.clearDatetimeissue = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegDriver.prototype.hasDatetimeissue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 datetimeExpire = 4;
 * @return {number}
 */
proto.dataATG.RegDriver.prototype.getDatetimeexpire = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.dataATG.RegDriver} returns this
 */
proto.dataATG.RegDriver.prototype.setDatetimeexpire = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegDriver} returns this
 */
proto.dataATG.RegDriver.prototype.clearDatetimeexpire = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegDriver.prototype.hasDatetimeexpire = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string regPlace = 5;
 * @return {string}
 */
proto.dataATG.RegDriver.prototype.getRegplace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.RegDriver} returns this
 */
proto.dataATG.RegDriver.prototype.setRegplace = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegDriver} returns this
 */
proto.dataATG.RegDriver.prototype.clearRegplace = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegDriver.prototype.hasRegplace = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string license = 6;
 * @return {string}
 */
proto.dataATG.RegDriver.prototype.getLicense = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.RegDriver} returns this
 */
proto.dataATG.RegDriver.prototype.setLicense = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegDriver} returns this
 */
proto.dataATG.RegDriver.prototype.clearLicense = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegDriver.prototype.hasLicense = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataATG.RegCompany.prototype.toObject = function(opt_includeInstance) {
  return proto.dataATG.RegCompany.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataATG.RegCompany} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataATG.RegCompany.toObject = function(includeInstance, msg) {
  var f, obj = {
    company: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    address: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    tel: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataATG.RegCompany}
 */
proto.dataATG.RegCompany.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataATG.RegCompany;
  return proto.dataATG.RegCompany.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataATG.RegCompany} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataATG.RegCompany}
 */
proto.dataATG.RegCompany.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompany(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataATG.RegCompany.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataATG.RegCompany.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataATG.RegCompany} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataATG.RegCompany.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required string company = 1;
 * @return {string}
 */
proto.dataATG.RegCompany.prototype.getCompany = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.RegCompany} returns this
 */
proto.dataATG.RegCompany.prototype.setCompany = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegCompany} returns this
 */
proto.dataATG.RegCompany.prototype.clearCompany = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegCompany.prototype.hasCompany = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.dataATG.RegCompany.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.RegCompany} returns this
 */
proto.dataATG.RegCompany.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegCompany} returns this
 */
proto.dataATG.RegCompany.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegCompany.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string address = 3;
 * @return {string}
 */
proto.dataATG.RegCompany.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.RegCompany} returns this
 */
proto.dataATG.RegCompany.prototype.setAddress = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegCompany} returns this
 */
proto.dataATG.RegCompany.prototype.clearAddress = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegCompany.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string tel = 4;
 * @return {string}
 */
proto.dataATG.RegCompany.prototype.getTel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.RegCompany} returns this
 */
proto.dataATG.RegCompany.prototype.setTel = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.RegCompany} returns this
 */
proto.dataATG.RegCompany.prototype.clearTel = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.RegCompany.prototype.hasTel = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dataATG.WayPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.dataATG.WayPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dataATG.WayPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataATG.WayPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    vehicle: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    driver: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    speed: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    datetime: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    x: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    y: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    z: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    heading: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    ignition: (f = jspb.Message.getBooleanField(msg, 9)) == null ? undefined : f,
    door: (f = jspb.Message.getBooleanField(msg, 10)) == null ? undefined : f,
    aircon: (f = jspb.Message.getBooleanField(msg, 11)) == null ? undefined : f,
    maxvalidspeed: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    vss: (f = jspb.Message.getOptionalFloatingPointField(msg, 13)) == null ? undefined : f,
    location: (f = jspb.Message.getField(msg, 14)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dataATG.WayPoint}
 */
proto.dataATG.WayPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dataATG.WayPoint;
  return proto.dataATG.WayPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dataATG.WayPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dataATG.WayPoint}
 */
proto.dataATG.WayPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVehicle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDriver(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDatetime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeading(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIgnition(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDoor(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAircon(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxvalidspeed(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVss(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dataATG.WayPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dataATG.WayPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dataATG.WayPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dataATG.WayPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * required string vehicle = 1;
 * @return {string}
 */
proto.dataATG.WayPoint.prototype.getVehicle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.setVehicle = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.clearVehicle = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.WayPoint.prototype.hasVehicle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string driver = 2;
 * @return {string}
 */
proto.dataATG.WayPoint.prototype.getDriver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.setDriver = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.clearDriver = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.WayPoint.prototype.hasDriver = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required float speed = 3;
 * @return {number}
 */
proto.dataATG.WayPoint.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.setSpeed = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.clearSpeed = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.WayPoint.prototype.hasSpeed = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 datetime = 4;
 * @return {number}
 */
proto.dataATG.WayPoint.prototype.getDatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.setDatetime = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.clearDatetime = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.WayPoint.prototype.hasDatetime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required double x = 5;
 * @return {number}
 */
proto.dataATG.WayPoint.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.setX = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.clearX = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.WayPoint.prototype.hasX = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required double y = 6;
 * @return {number}
 */
proto.dataATG.WayPoint.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.setY = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.clearY = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.WayPoint.prototype.hasY = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float z = 7;
 * @return {number}
 */
proto.dataATG.WayPoint.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.setZ = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.clearZ = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.WayPoint.prototype.hasZ = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float heading = 8;
 * @return {number}
 */
proto.dataATG.WayPoint.prototype.getHeading = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.setHeading = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.clearHeading = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.WayPoint.prototype.hasHeading = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool ignition = 9;
 * @return {boolean}
 */
proto.dataATG.WayPoint.prototype.getIgnition = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.setIgnition = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.clearIgnition = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.WayPoint.prototype.hasIgnition = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool door = 10;
 * @return {boolean}
 */
proto.dataATG.WayPoint.prototype.getDoor = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.setDoor = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.clearDoor = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.WayPoint.prototype.hasDoor = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool aircon = 11;
 * @return {boolean}
 */
proto.dataATG.WayPoint.prototype.getAircon = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.setAircon = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.clearAircon = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.WayPoint.prototype.hasAircon = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double maxValidSpeed = 12;
 * @return {number}
 */
proto.dataATG.WayPoint.prototype.getMaxvalidspeed = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.setMaxvalidspeed = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.clearMaxvalidspeed = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.WayPoint.prototype.hasMaxvalidspeed = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional float vss = 13;
 * @return {number}
 */
proto.dataATG.WayPoint.prototype.getVss = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.setVss = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.clearVss = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.WayPoint.prototype.hasVss = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string location = 14;
 * @return {string}
 */
proto.dataATG.WayPoint.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.setLocation = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.dataATG.WayPoint} returns this
 */
proto.dataATG.WayPoint.prototype.clearLocation = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dataATG.WayPoint.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 14) != null;
};


goog.object.extend(exports, proto.dataATG);
